@startuml classDiagram

Timer "1" <-- MinesweeperController
Difficulty "1" <-- MinesweeperController
MinesweeperView "1"<-- MinesweeperController
Minesweeper "1" <-- MinesweeperController
Minefield "1" <-- Minesweeper
Action "*" <-- Minesweeper
Action "*" <-- Timer
Square "*" <-- Minefield

class Timer {
    - List<Action>: onSecondAction
    - boolean: startTimeIsSet
    - long: startTime
    - double: NANO_SECONDS_IN_SECOND
    + void: handle()
    + void: addOnSecond()
    - void: onSecond()
    + int: getSeconds()
}

enum Difficulty {
    - int: width
    - int: height
    - int: mineCount
    - String: name
    + int: getWidth()
    + int: getHeight()
    + int: getMineCount()
    + String: getName()
    + Difficulty: getDifficulty()
}

class MinesweeperController{
    - SceneManager: sceneManager
    - Minesweeper: minesweeper
    - HighscoresAccess: access
    - Difficulty: difficulty
    - Timer: timer
    - MinesweeperView: minesweeperView
    - void: changeDifficulty()
    - void: setUpMinesweeper()
    - void: setUpMinefieldView()
    - void: setUpTimer()
    + void: restart()
    - void: handleRestart()
    - void: handleClickedSquare()
    - void: handleLeftClickedSquare()
    - void: openSquare()
    - void: handleRightClickedSquare()
    - void: handleSpacebarOnSquare()
    - void: chord()
    - void: toggleFlag()
    - void: saveScore()
    - void: handleWin()
    - void: handleLoss()
    - void: handleInput()
    - void: handleLoss()
    + void: setSceneSwitcher()
    - void: showHighscores()
    + void: onKeyReleased()
    - void: alertCouldNotReachServer()
}

class MinesweeperView {
    - int: width
    - int: height
    - List<List<ImageView>>: squareImages
    - List<List<Button>>: squareButtons
    - Image: bombImage
    - Image: flagImage
    - Image[]: openedSquareImages
    - void: createButtons()
    - void: createImages()
    - ImageView: getImageView()
    - Button: getButton()
    + void: bindGridPane()
    + void: setOnMouseRelease()
    + void: setBombImage()
    + void: setFlagImage()
    + void: setBlankImage()
    + void: setOpenedSquareImage()
    + void: showLoss()
    + Integer[]: hoveredSquare()
}

class Minesweeper {
    - Minefield: minefield
    - List<Action>: onWinActions
    - List<Action>: onLossActions
    - List<Action>: onStartActions
    - boolean: gameIsStarted
    - int: mineCount
    - int: openedSquares
    - int: flagCount
    + boolean: hasMine()
    + void: toggleFlag()
    + boolean: isFlagged()
    + int: flagsLeft()
    + void: openSquare()
    - boolean: allSafeSquaresAreOpened()
    + boolean: squareIsOpened()
    + void: addOnWin()
    + void: addOnLoss()
    + void: addOnStart()
    - void: win()
    - void: lose()
    - void: start()
    + int: getWidth()
    + int: getHeight()
    + int: getAdjacentMines()
    + Integer[][]: safeSquaresAround()
}

interface Action {
    void: run()
}

class Minefield {
    - List<List<Square>>: squares
    - int: width
    - int: height
    + Square: getSquare()
    + void: setSquare()
    + boolean: isOutOfBounds()
    + void: toggleFlag()
    + boolean: isFlagged()
    + void: placeMine()
    + boolean: hasMine()
    + void: initializeMines()
    - int: safeSquareCount()
    - boolean: isSafeSquare()
    + void: openSquare()
    + boolean: squareIsOpened()
    + int: getWidth()
    + int: getHeight()
}

class Square {
    - boolean: isFlagged
    - boolean: hasMine
    - boolean: isOpened
    + void: toggleFlag()
    + boolean: isFlagged()
    + void: setMine()
    + boolean: hasMine()
    + void: open()
    + boolean: isOpened()
}

@enduml